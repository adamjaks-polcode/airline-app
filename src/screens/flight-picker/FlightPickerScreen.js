import {StyleSheet, View} from 'react-native';import {Text, useTheme} from 'react-native-paper';import FlightInfoBox from './FlightInfoBox';import {useTranslation} from 'react-i18next';import {useLayoutEffect, useState} from 'react';import moment from 'moment';import {useSelector} from 'react-redux';import {useGetAllFlightsQuery} from '../../../services/flightsService';const DATE_FORMAT = 'DD/MM/YYYY';const useStyles = () => {  const {colors} = useTheme();  return StyleSheet.create({    headerWrapper: {      paddingTop: 32,      paddingHorizontal: '10%'    },    otherDatesWrapper: {      paddingVertical: 32,      backgroundColor: colors.background.light,      paddingHorizontal: '10%',      marginTop: 32    },    otherDatesItems: {      marginTop: 24,      gap: 8    }  })};const FlightPickerScreen = ({navigation}) => {  const [matchedFlights, setMatchedFlights] = useState([]);  const [exactFlights, setExactFlights] = useState([]);  const from = useSelector(state => state.flightBooking.from);  const to = useSelector(state => state.flightBooking.to);  const departureDate = useSelector(state => state.flightBooking.departureDate);  const {data: allFlights, isLoading} = useGetAllFlightsQuery();  const {t} = useTranslation();  const styles = useStyles();  useLayoutEffect(() => {    if (!isLoading) {      navigation.setOptions({        title: `${from.city} - ${to.city}`,      });      const matchedFlights = allFlights.filter(flightDataItem => flightDataItem.from === from.city && flightDataItem.to === to.city);      const exactFlights = matchedFlights.filter(flight => flight.departureDate === departureDate);      setExactFlights(exactFlights);      setMatchedFlights(matchedFlights.filter(flight => !exactFlights.includes(flight)));    }  }, [from.city, to.city, departureDate, isLoading]);  return (    <>      <View style={styles.headerWrapper}>        {          exactFlights.map(flightItem => (            <FlightInfoBox              item={flightItem}              navigation={navigation}              key={flightItem.id}            />          ))        }        {          exactFlights.length === 0 && (            <Text>{t('flightPickerScreen.thereIsNoFlightOn')} {moment(departureDate).format(DATE_FORMAT)}</Text>          )        }      </View>      <View style={styles.otherDatesWrapper}>        <Text variant="titleLarge">{t('flightPickerScreen.otherDates')}</Text>        <View style={styles.otherDatesItems}>          {            matchedFlights.map(flightItem => (              <FlightInfoBox                item={flightItem}                navigation={navigation}                key={flightItem.id}              />            ))          }          {            matchedFlights.length === 0 && (              // todo: add translations              <Text>There are no other dates for this flight.</Text>            )          }        </View>      </View>    </>  )};export default FlightPickerScreen;