import {StyleSheet, View, ScrollView} from 'react-native';import {Searchbar, Text, Card, useTheme, IconButton} from 'react-native-paper';import {FLIGHTS_DATA} from '../../flightsData';import {TouchableOpacity} from 'react-native-gesture-handler';import {useTranslation} from 'react-i18next';import LocalizationListItem from './LocalizationListItem';const useStyles = () => {  const {colors} = useTheme();  return StyleSheet.create({    wrapper: {      paddingHorizontal: '10%',      paddingVertical: 32    },    localizationItemWrapper: {      marginTop: 32    },    localizationList: {      marginTop: 16,      gap: 12    },    clearBox: {      shadowColor: 'transparent',      borderRadius: 4,    },    clearBoxText: {      color: colors.danger.medium,      fontWeight: 600    },    clearBoxContent: {      flexDirection: 'row',      alignItems: 'center',      justifyContent: 'space-between',      paddingVertical: 0,      paddingLeft: 16,      paddingRight: 0    }  })};const filterAvailableFlights = (type, currentLocalization) => {  if (type === 'from' && currentLocalization.currentTo.airport) {    return FLIGHTS_DATA.filter(flight => flight.toAirport === currentLocalization.currentTo.airport);  }  if (type === 'to' && currentLocalization.currentFrom.airport) {    return FLIGHTS_DATA.filter(flight => flight.fromAirport === currentLocalization.currentFrom.airport);  }  else return FLIGHTS_DATA;};const sortFlightsByCountryFrom = (type, currentLocalization) => {  const groupedData = [];  filterAvailableFlights(type, currentLocalization).forEach(flight => {    const { countryFrom, from, fromAirport } = flight;    const countryGroup = groupedData.find(group => group.country === countryFrom);    if (countryGroup) {      const cityExists = countryGroup.cities.some(city => city.from === from && city.fromAirport === fromAirport);      if (!cityExists) {        countryGroup.cities.push({ from, fromAirport });      }    } else {      groupedData.push({ country: countryFrom, cities: [{ from, fromAirport }] });    }  });  return groupedData;};const sortFlightsByCountryTo = (type, currentLocalization) => {  const groupedData = [];  filterAvailableFlights(type, currentLocalization).forEach(flight => {    const { countryTo, to, toAirport } = flight;    const countryGroup = groupedData.find(group => group.country === countryTo);    if (countryGroup) {      const cityExists = countryGroup.cities.some(city => city.to === to && city.toAirport === toAirport);      if (!cityExists) {        countryGroup.cities.push({ to, toAirport });      }    } else {      groupedData.push({ country: countryTo, cities: [{ to, toAirport }] });    }  });  return groupedData;};const sortFlightsByCountry = (type, currentLocalization) => {  return type === 'from' ?    sortFlightsByCountryFrom(type, currentLocalization) : sortFlightsByCountryTo(type, currentLocalization);};const LocalizationPickerScreen = ({route, navigation}) => {  const {onValueChange, type, currentFrom, currentTo} = route.params;  const theme = useTheme();  const {t} = useTranslation();  const styles = useStyles();  return (    <ScrollView style={styles.wrapper}>      <Searchbar        placeholder={t('localizationPickerScreen.searchForCityAirportOrCountry')}        style={{backgroundColor: theme.colors.background}}      />      <View>        <View style={styles.localizationItemWrapper}>          <TouchableOpacity onPress={() => {            onValueChange({city: '', airport: ''});            navigation.navigate('HomeScreen')          }}>            <Card style={styles.clearBox}>              <Card.Content style={styles.clearBoxContent}>                <Text variant="bodyLarge" style={styles.clearBoxText}>{t('localizationPickerScreen.clear')}</Text>                <IconButton                  icon="close"                  size={32}                  iconColor="#ef5350"                />              </Card.Content>            </Card>          </TouchableOpacity>        </View>        {          sortFlightsByCountry(type, {currentFrom, currentTo}).map(flight => (            <View style={styles.localizationItemWrapper}>              <Text variant="titleLarge">{flight.country}</Text>              <View style={styles.localizationList}>                {                  flight.cities.map(city => (                    <LocalizationListItem                      item={city}                      type={type}                      onValueChange={onValueChange}                      navigation={navigation}                    />                  ))                }              </View>            </View>          ))        }      </View>    </ScrollView>  )};export default LocalizationPickerScreen;